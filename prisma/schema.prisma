// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt @default(now())
  password             String
  password_reset_token String?
  token_send_at        DateTime?
  email_verified_at    DateTime?
  email_verify_token   String?
  workspaces    Workspace[]
  members       Member[]
  channelMembers ChannelMember[]
  messages      Message[]
  reactions     Reaction[]
  forwardedMessages ForwardedMessage[]
}

model Workspace {
  id          String    @id @default(cuid())
  name        String  
  image       String?
  joinCode    String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  members     Member[]
  channels    Channel[]
}

enum ChannelType {
  PUBLIC
  PRIVATE  
  ANNOUNCEMENT
}

model Channel {
  id          String      @id @default(cuid())
  name        String
  type        ChannelType @default(PUBLIC)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt @default(now())
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  messages    Message[]
  members     ChannelMember[]
  forwardedMessages ForwardedMessage[]
}

model Message {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
  channelId   String
  channel     Channel   @relation(fields: [channelId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  // Reply functionality
  replyToId   String?
  replyTo     Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     Message[] @relation("MessageReplies")
  
  // Forward functionality
  forwardedMessages ForwardedMessage[]
  
  // Attachments
  attachments Attachment[]
  
  // Reactions
  reactions   Reaction[]
}

model Attachment {
  id          String    @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  createdAt   DateTime  @default(now())
  messageId   String
  message     Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model Reaction {
  id          String    @id @default(cuid())
  emoji       String
  createdAt   DateTime  @default(now())
  messageId   String
  message     Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, emoji])
}

model ForwardedMessage {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  originalMessageId String
  originalMessage Message @relation(fields: [originalMessageId], references: [id])
  forwardedByUserId String
  forwardedBy User     @relation(fields: [forwardedByUserId], references: [id])
  channelId   String
  channel     Channel  @relation(fields: [channelId], references: [id])
}

enum Role {
  ADMIN
  MODERATOR
  MEMBER
}

model Member {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  role        Role
  isActive    Boolean   @default(true)
}

model ChannelMember {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt @default(now())
  channelId   String
  channel     Channel   @relation(fields: [channelId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  isActive    Boolean   @default(true)

  @@unique([channelId, userId])
}
